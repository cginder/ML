#### HW 4.2 ####

PackageList=c("MASS", 
              "ISLR",
              "animation",
              "ElemStatLearn",
              "glmnet",
              "textir",
              "nnet",
              "methods",
              "statmod",
              "stats",
              "graphics",
              "RCurl",
              "jsonlite",
              "tools",
              "utils",
              "data.table",
              "gbm",
              "ggplot2",
              "randomForest",
              "tree",
              "class",
              "kknn",
              "e1071",
              "data.table",
              "R.utils",
              "recommenderlab",
              "h2o")
NewPackages=PackageList[!(PackageList %in% 
                            installed.packages()[,"Package"])]
if(length(NewPackages)) install.packages(NewPackages)
lapply(PackageList,require,character.only=TRUE)#array function

fileConnection <- gzcon(file("videoGames.json.gz", "rb"))
InputData = stream_in(fileConnection)


ratingData = as(InputData[c("reviewerID", "itemID", "rating")], "realRatingMatrix")

# we keep users that have rated more than 2 video games
ratingData = ratingData[rowCounts(ratingData) > 2,]

# we will focus only on popular video games that have 
# been rated by more than 3 times
ratingData = ratingData[,colCounts(ratingData) > 3]

# we are left with this many users and items
dim(ratingData)

# example on how to recommend using Popular method
r = Recommender(ratingData, method="POPULAR")

# recommend 5 items to user it row 13
rec = predict(r, ratingData[13, ], type="topNList", n=5)
as(rec, "list")

# predict ratings 
rec = predict(r, ratingData[13, ], type="ratings")
as(rec, "matrix")


# Find user with most ratings
most.ratings.user <- which.max(rowCounts(ratingData))
print(most.ratings.user)

most.rated.vg <- which.max(colCounts(ratingData))
print(most.rated.vg)

# Find Similar User to U141954350
currentUser <- "U141954350"

otherUsers <- ratingData[!(rownames(ratingData) %in% c(currentUser)),]

compare_1=similarity(ratingData[currentUser,],otherUsers,method="jaccard")
compare_1_mat=as(compare_1,'matrix')

matchedUser=colnames(compare_1_mat)[compare_1_mat==max(compare_1_mat)]
cat('The user that is most similar to ',currentUser, ' is ',matchedUser,'\n')












recommenderRegistry$get_entry('UBCF', dataType='realRatingMatrix')

ubcf_rec = Recommender(
  data=ratingData,
  method='UBCF',           # User-Based Collaborative Filtering
  parameter=list(
    normalize='center',    # normalizing by subtracting average rating per user;
    # note that we don't scale by standard deviations here;
    # we are assuming people rate on the same scale but have
    # different biases
    method='Pearson',      # use Pearson correlation
    nn=30                  # number of Nearest Neighbors for calibration
  ))
ubcf_rec
